import os
import customtkinter as ctk
from PIL import Image, ImageTk
import pyodbc
import requests

SQL_SERVER = 'localhost\SqlExpress'
SQL_DATABASE = 'Recipies'

def get_connection():
    return pyodbc.connect(
        f"DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={SQL_SERVER};DATABASE={SQL_DATABASE};Trusted_Connection=yes;"
    )

def init_db():
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            IF NOT EXISTS (
                SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'products'
            )
            CREATE TABLE products (
                id INT IDENTITY(1,1) PRIMARY KEY,
                name NVARCHAR(255) UNIQUE NOT NULL
            )
        """)
        cursor.execute("""
            IF NOT EXISTS (
                SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'recipes'
            )
            CREATE TABLE recipes (
                id INT IDENTITY(1,1) PRIMARY KEY,
                name NVARCHAR(255) NOT NULL
            )
        """)
        conn.commit()

def get_db_products():
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM products")
        return [row[0] for row in cursor.fetchall()]

def get_db_recipes():
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM recipes")
        return [row[0] for row in cursor.fetchall()]

def get_available_recipes(products):
    all_recipes = get_db_recipes()
    return [r for r in all_recipes if any(p.lower() in r.lower() for p in products)]

def filter_recipes(recipes, query):
    return [r for r in recipes if query.lower() in r.lower()]

def fetch_and_store_recipes_from_api():
    url = "https://www.themealdb.com/api/json/v1/1/search.php?f=a"
    try:
        response = requests.get(url)
        data = response.json()
        meals = data.get("meals", [])
        with get_connection() as conn:
            cursor = conn.cursor()
            for meal in meals:
                name = meal.get("strMeal")
                if name:
                    cursor.execute(
                        "IF NOT EXISTS (SELECT 1 FROM recipes WHERE name = ?) INSERT INTO recipes (name) VALUES (?)",
                        (name, name)
                    )
            conn.commit()
    except Exception as e:
        print("Błąd pobierania przepisów z API:", e)

class StartPage(ctk.CTkFrame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        self.configure(fg_color="transparent")

        self.columnconfigure(0, weight=1)
        self.rowconfigure(0, weight=1)
        self.rowconfigure(1, weight=1)
        self.rowconfigure(2, weight=1)
        self.rowconfigure(3, weight=2)

        welcome_label = ctk.CTkLabel(self, text="Witamy w Interaktywnej Lodówce!", font=ctk.CTkFont(size=28, weight="bold"), fg_color="transparent")
        welcome_label.grid(row=0, column=0, pady=(60, 20), sticky="n")

        button_frame = ctk.CTkFrame(self, fg_color="transparent")
        button_frame.grid(row=3, column=0, pady=(0, 80), sticky="s")

        fridge_btn = ctk.CTkButton(button_frame, text="Lodówka", command=lambda: controller.show_frame("FridgePage"), width=250, height=60, font=ctk.CTkFont(size=18))
        fridge_btn.pack(pady=15)

        recipes_btn = ctk.CTkButton(button_frame, text="Przepisy", command=lambda: controller.show_frame("RecipesPage"), width=250, height=60, font=ctk.CTkFont(size=18))
        recipes_btn.pack(pady=15)

class FridgePage(ctk.CTkFrame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        self.configure(fg_color="transparent")

        self.entry = ctk.CTkEntry(self, placeholder_text="Dodaj produkt")
        self.entry.pack(pady=5)

        ctk.CTkButton(self, text="Dodaj", command=self.add_product).pack(pady=5)
        self.products_box = ctk.CTkTextbox(self, width=400, height=300)
        self.products_box.pack(pady=10)

        self.update_products()

        ctk.CTkButton(self, text="Wróć", command=lambda: controller.show_frame("StartPage")).pack(pady=5)

    def add_product(self):
        name = self.entry.get().strip()
        if name:
            with get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("IF NOT EXISTS (SELECT 1 FROM products WHERE name = ?) INSERT INTO products (name) VALUES (?)", (name, name))
                conn.commit()
            self.update_products()
            self.entry.delete(0, "end")

    def update_products(self):
        self.products_box.delete("1.0", "end")
        products = get_db_products()
        self.products_box.insert("end", "\n".join(products))

class RecipesPage(ctk.CTkFrame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        self.configure(fg_color="transparent")

        self.search_entry = ctk.CTkEntry(self, placeholder_text="Szukaj przepisu")
        self.search_entry.pack(pady=5)

        ctk.CTkButton(self, text="Szukaj", command=self.search_recipes).pack(pady=5)
        self.recipes_box = ctk.CTkTextbox(self, width=400, height=300)
        self.recipes_box.pack(pady=10)

        ctk.CTkButton(self, text="Wróć", command=lambda: controller.show_frame("StartPage")).pack(pady=5)

        self.update_recipes()

    def search_recipes(self):
        query = self.search_entry.get().strip()
        recipes = get_available_recipes(get_db_products())
        filtered = filter_recipes(recipes, query)
        self.recipes_box.delete("1.0", "end")
        self.recipes_box.insert("end", "\n".join(filtered))

    def update_recipes(self):
        recipes = get_available_recipes(get_db_products())
        self.recipes_box.delete("1.0", "end")
        self.recipes_box.insert("end", "\n".join(recipes))

class Aplikacja(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Interaktywna Lodówka")
        self.geometry("800x600")
        self.resizable(True, True)

        self.products = []
        self.current_page = None

        init_db()
        fetch_and_store_recipes_from_api()
        self.products = get_db_products()

        base_dir = os.path.dirname(os.path.abspath(__file__))

        try:
            self._default_img = Image.open(os.path.join(base_dir, "MainPage.jpeg"))
            self._fridge_img = Image.open(os.path.join(base_dir, "Fridge.jpeg"))
            self._recipes_img = Image.open(os.path.join(base_dir, "Recipies.jpeg"))
        except Exception as e:
            print("Błąd ładowania obrazów tła:", e)
            self._default_img = Image.new("RGB", (1792, 1024), color=(200, 200, 200))
            self._fridge_img = self._default_img
            self._recipes_img = self._default_img

        initial_size = (1792, 1024)
        self.default_bg = ctk.CTkImage(self._default_img, size=initial_size)
        self.fridge_bg = ctk.CTkImage(self._fridge_img, size=initial_size)
        self.recipes_bg = ctk.CTkImage(self._recipes_img, size=initial_size)

        self.background_label = ctk.CTkLabel(self, image=self.default_bg, text="")
        self.background_label.place(x=0, y=0, relwidth=1, relheight=1)

        self.container = ctk.CTkFrame(self, fg_color="transparent")
        self.container.place(x=0, y=0, relwidth=1, relheight=1)
        self.container.grid_rowconfigure(0, weight=1)
        self.container.grid_columnconfigure(0, weight=1)

        self.frames = {}
        for Page in (StartPage, FridgePage, RecipesPage):
            page = Page(parent=self.container, controller=self)
            self.frames[Page.__name__] = page
            page.grid(row=0, column=0, sticky="nsew")

        self.bind("<Configure>", self._on_resize)
        self.show_frame("StartPage")

    def show_frame(self, page_name: str):
        if page_name == "FridgePage":
            bg = self.fridge_bg
        elif page_name == "RecipesPage":
            bg = self.recipes_bg
        else:
            bg = self.default_bg
        self.background_label.configure(image=bg)
        self.background_label.image = bg

        self.current_page = page_name
        self.frames[page_name].tkraise()

    def _on_resize(self, event):
        w, h = event.width, event.height
        self.default_bg = ctk.CTkImage(self._default_img, size=(w, h))
        self.fridge_bg = ctk.CTkImage(self._fridge_img, size=(w, h))
        self.recipes_bg = ctk.CTkImage(self._recipes_img, size=(w, h))

        if self.current_page == "FridgePage":
            bg = self.fridge_bg
        elif self.current_page == "RecipesPage":
            bg = self.recipes_bg
        else:
            bg = self.default_bg
        self.background_label.configure(image=bg)
        self.background_label.image = bg

if __name__ == "__main__":
    app = Aplikacja()
    app.mainloop()
